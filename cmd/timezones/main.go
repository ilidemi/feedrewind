package main

import (
	"fmt"
	"go/format"
	"os"
	"strings"

	"github.com/goccy/go-json"
)

type tzRow struct {
	Name               string
	AlternativeName    string
	Group              []string
	RawOffsetInMinutes int
	RawFormat          string
}

type friendlyTimezone struct {
	groupId                 string
	friendlyName            string
	shortFriendlyPrefixName string
	shortFriendlySuffixName string
	shortFriendlyName       string
}

func main() {
	// From https://github.com/vvo/tzdb/blob/main/raw-time-zones.json
	jsonFile, err := os.Open("cmd/timezones/raw-time-zones.json")
	if err != nil {
		panic(err)
	}
	defer jsonFile.Close()

	decoder := json.NewDecoder(jsonFile)
	var tzRows []tzRow
	if err := decoder.Decode(&tzRows); err != nil {
		panic(err)
	}

	overrides := map[string]friendlyTimezone{
		"Pacific/Kanton": {
			groupId:                 "Pacific/Enderbury",
			friendlyName:            "+13:00 Phoenix Islands Time - Endenbury",
			shortFriendlyPrefixName: "+13:00 Phoenix Islands Time",
			shortFriendlySuffixName: "Phoenix Islands Time (+13:00)",
			shortFriendlyName:       "Phoenix Islands Time",
		},
	}

	friendlyTzByGroupId := make(map[string]friendlyTimezone)
	tzdbGroups := make(map[string]bool)
	for _, tzRow := range tzRows {
		var friendlyTz friendlyTimezone
		if override, ok := overrides[tzRow.Name]; ok {
			friendlyTz = override
		} else {
			sign := "+"
			offsetAbs := tzRow.RawOffsetInMinutes
			if tzRow.RawOffsetInMinutes < 0 {
				sign = "-"
				offsetAbs = -tzRow.RawOffsetInMinutes
			}
			hours := offsetAbs / 60
			minutes := offsetAbs % 60
			shortFriendlyPrefixName :=
				fmt.Sprintf("%s%02d:%02d %s", sign, hours, minutes, tzRow.AlternativeName)
			shortFriendlySuffixName :=
				fmt.Sprintf("%s (%s%02d:%02d)", tzRow.AlternativeName, sign, hours, minutes)
			friendlyTz = friendlyTimezone{
				groupId:                 tzRow.Name,
				friendlyName:            tzRow.RawFormat,
				shortFriendlyPrefixName: shortFriendlyPrefixName,
				shortFriendlySuffixName: shortFriendlySuffixName,
				shortFriendlyName:       tzRow.AlternativeName,
			}
		}

		friendlyTzByGroupId[friendlyTz.groupId] = friendlyTz
		tzdbGroups[friendlyTz.groupId] = true
	}

	groupIdByTz := make(map[string]string)
	tzdbTimezones := make(map[string]bool)
	for _, tzRow := range tzRows {
		for _, timezone := range tzRow.Group {
			if tzdbTimezones[timezone] {
				continue
			}
			tzdbTimezones[timezone] = true
			var groupId string
			if override, ok := overrides[tzRow.Name]; ok {
				groupId = override.groupId
			} else {
				groupId = tzRow.Name
			}
			groupIdByTz[timezone] = groupId
		}
	}

	shortFriendlyPrefixNameByGroupId := make(map[string]string)
	shortFriendlySuffixNameByGroupId := make(map[string]string)
	shortFriendlyNameByGroupId := make(map[string]string)
	for groupId, friendlyTz := range friendlyTzByGroupId {
		shortFriendlyPrefixNameByGroupId[groupId] = friendlyTz.shortFriendlyPrefixName
		shortFriendlySuffixNameByGroupId[groupId] = friendlyTz.shortFriendlySuffixName
		shortFriendlyNameByGroupId[groupId] = friendlyTz.shortFriendlyName
	}
	shortFriendlyPrefixNameByGroupIdJson, err := json.Marshal(&shortFriendlyPrefixNameByGroupId)
	if err != nil {
		panic(err)
	}
	shortFriendlySuffixNameByGroupIdJson, err := json.Marshal(&shortFriendlySuffixNameByGroupId)
	if err != nil {
		panic(err)
	}
	shortFriendlyNameByGroupIdJson, err := json.Marshal(&shortFriendlyNameByGroupId)
	if err != nil {
		panic(err)
	}

	var b strings.Builder
	fmt.Fprintln(&b, "// Code generated by cmd/timezones; DO NOT EDIT")
	fmt.Fprintln(&b, "package util")
	fmt.Fprintln(&b)
	fmt.Fprintln(&b, "var FriendlyNameByGroupId = map[string]string {")
	for groupId, friendlyTz := range friendlyTzByGroupId {
		fmt.Fprintf(&b, "    %q: %q,\n", groupId, friendlyTz.friendlyName)
	}
	fmt.Fprintln(&b, "}")
	fmt.Fprintln(&b)
	fmt.Fprintln(&b, "var GroupIdByTimezoneId = map[string]string {")
	for tz, groupId := range groupIdByTz {
		fmt.Fprintf(&b, "    %q: %q,\n", tz, groupId)
	}
	fmt.Fprintln(&b, "}")
	fmt.Fprintln(&b)
	fmt.Fprintf(&b, "const ShortFriendlyPrefixNameByGroupIdJson = %q\n", shortFriendlyPrefixNameByGroupIdJson)
	fmt.Fprintf(&b, "const ShortFriendlySuffixNameByGroupIdJson = %q\n", shortFriendlySuffixNameByGroupIdJson)
	fmt.Fprintf(&b, "const ShortFriendlyNameByGroupIdJson = %q\n", shortFriendlyNameByGroupIdJson)

	formatted, err := format.Source([]byte(b.String()))
	if err != nil {
		panic(err)
	}

	err = os.WriteFile("util/timezones.go", formatted, 0666)
	if err != nil {
		panic(err)
	}
}
